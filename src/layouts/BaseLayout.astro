---
import BaseHead from '@/components/BaseHead.astro'
import Footer from '@/components/layout/Footer.astro'
import Header from '@/components/layout/Header.astro'
import ThemeProvider from '@/components/ThemeProvider.astro'
import type { SiteMeta } from '@/types'
import { siteConfig } from '@/site-config'

// Import the global.css file here so that it is included on
// all pages through the use of the <BaseLayout /> component.
import '@/assets/styles/app.css'
import 'katex/dist/katex.min.css'
import 'remark-github-blockquote-alert/alert.css'

interface Props {
  meta: SiteMeta
  highlightColor?: string
}

const {
  meta: { articleDate, description = siteConfig.description, ogImage, title },
  highlightColor
} = Astro.props
---

<html lang={siteConfig.lang}>
  <head>
    <BaseHead articleDate={articleDate} description={description} ogImage={ogImage} title={title} />
  </head>

  <body class='flex justify-center bg-background'>
    {
      highlightColor && highlightColor != 'hsl(var(--primary) / var(--tw-text-opacity))' && (
        <div
          class='pointer-events-none absolute start-0 top-0 z-0 h-1/2 w-full opacity-25'
          style={{ backgroundImage: `linear-gradient(${highlightColor}, transparent)` }}
        />
      )
    }
    <ThemeProvider />
    <main
      class='z-10 flex min-h-screen w-screen max-w-[60rem] flex-col items-center px-4 pb-10 text-[0.92rem] leading-relaxed sm:px-7 lg:px-10'
    >
      <Header />
      <slot />
      <Footer />
    </main>
  </body>
<script>
  function revealElementsWithStagger() {
    const bg = document.querySelector('.bg-hidden');
    const avatar = document.querySelector('.avatar-hidden');

    if (bg) {
      bg.classList.remove('bg-hidden');
      bg.classList.add('bg-visible');
    }

    // Delay avatar reveal slightly after background
    if (avatar) {
      setTimeout(() => {
        avatar.classList.remove('avatar-hidden');
        avatar.classList.add('avatar-visible');
      }, 1000); // Delay in ms
    }

    sessionStorage.setItem('homeRevealShown', 'true');

    window.removeEventListener('click', revealElementsWithStagger);
    window.removeEventListener('scroll', revealElementsWithStagger);
    window.removeEventListener('keydown', revealElementsWithStagger);
  }

  function showElementsInstantly() {
    const bg = document.querySelector('.bg-hidden');
    const avatar = document.querySelector('.avatar-hidden');

    if (bg) {
      bg.classList.remove('bg-hidden');
      bg.classList.add('bg-visible');
    }

    if (avatar) {
      avatar.classList.remove('avatar-hidden');
      avatar.classList.add('avatar-visible');
    }
  }

  function initReveal() {
    const bg = document.querySelector('.bg-hidden');
    const avatar = document.querySelector('.avatar-hidden');

    if (!bg && !avatar) return;

    if (sessionStorage.getItem('homeRevealShown') === 'true') {
      showElementsInstantly();
    } else {
      window.addEventListener('click', revealElementsWithStagger);
      window.addEventListener('scroll', revealElementsWithStagger);
      window.addEventListener('keydown', revealElementsWithStagger);
    }
  }

  window.addEventListener('load', initReveal);
  document.addEventListener('astro:after-swap', initReveal);
</script>
</html>
