---
import { siteConfig, menuLinks } from '@/site-config'
declare global {
  interface Window {
    audioInstance?: HTMLAudioElement;
  }
}

---

<header-component
  class='group sticky top-4 z-30 mb-16 box-content w-full rounded-xl border border-transparent py-1 transition-all duration-300 sm:rounded-2xl [&.not-top]:border-border [&.not-top]:bg-background dark:[&.not-top]:bg-primary-foreground'
>
  <header class='flex flex-wrap text-sm sm:flex-nowrap sm:justify-start'>
    <nav
      class='relative mx-auto flex w-full items-center justify-between sm:flex sm:items-center'
      aria-label='global'
    >
      <div
        class='absolute -left-4 -top-8 -z-10 box-content hidden h-20 w-[calc(100%+2rem)] !duration-0 max-sm:group-[.expanded]:block max-sm:group-[.expanded.not-top]:hidden max-sm:group-[.expanded]:bg-white dark:max-sm:group-[.expanded]:bg-primary-foreground'
      >
      </div>
      <a
        class='flex-none text-xl font-semibold transition-all duration-300 group-[.not-top]:ms-3 sm:group-[.not-top]:ms-5'
        href='/'
        aria-label='Brand'>{siteConfig.title}</a
      >

      <!-- menu -->
      <div class='flex gap-x-4 sm:gap-x-6'>
        <div
          id='headerExpandConetent'
          style="background: rgba(0,0,0,0);"
          class='end-0 start-0 top-12 z-20 grid transition-all duration-300 group-[.not-top]:rounded-xl group-[.expanded]:opacity-100 dark:group-[.expanded.not-top]:bg-primary-foreground max-md:border-b max-sm:absolute max-sm:pb-4 max-sm:pt-0 max-sm:opacity-0 max-sm:group-[.not-top]:border max-sm:group-[.expanded]:bg-background max-sm:group-[.not-top]:px-4 max-sm:group-[.not-top]:pb-2 max-sm:group-[.not-top]:pt-2 sm:grid-rows-1 sm:border-0'
        >
          <div
            class='absolute -left-4 top-0 -z-10 box-content hidden h-full w-[calc(100%+2rem)] bg-white max-md:border-b max-sm:group-[.expanded]:block max-sm:group-[.expanded.not-top]:hidden dark:max-sm:group-[.expanded]:bg-primary-foreground'
          >
          </div>
          <div
            class='flex flex-col items-center justify-center gap-x-5 gap-y-2 overflow-hidden transition-colors sm:flex-row sm:gap-x-7'
          >
            {
              menuLinks.map((item) => (
                <a
                  href={item.link}
                  class='w-full flex-none grow py-2 text-right text-[1.05rem] font-medium hover:text-primary sm:w-fit'
                  aria-label='Nav Menu Item'
                >
                  {item.label}
                </a>
              ))
            }
            <div class='flex w-full grow flex-row justify-end gap-x-3 sm:w-fit sm:gap-x-5'>
              <!-- <a class='px-1 py-2' href='https://www.travellings.cn/go.html' title='Travelling'>
                <span class='sr-only'>Travelling</span>
                <svg class='size-6'>
                  <use href='/icons/header.svg#mingcute-train-2-line'></use>
                </svg>
              </a> -->

              <a class='px-1 py-2' href='/search' title='Search'>
                <span class='sr-only'>Search</span>
                <svg class='size-6'>
                  <use href='/icons/header.svg#mingcute-search-2-line'></use>
                </svg>
              </a>
            </div>
            <!-- <div class='flex w-full grow flex-row justify-end gap-x-3 sm:w-fit sm:gap-x-5'> -->
              <!-- <span id="playPauseButton">Play</span> -->
              <!-- <a style="cursor:pointer" id="playPauseLink" class="play-pause-link">
                <svg class="size-6">
                  <use href="/icons/header.svg#play-circle-line"></use>
                </svg>
              </a> -->
            <!-- </div> -->
            
          </div>
        </div>

        <!-- buttons -->
        <div class='flex gap-x-4 transition-all group-[.not-top]:me-1.5 group-[.not-top]:gap-x-2'>
          <!-- Dark/Light mode button -->
          <button
            id='toggleDarkMode'
            class='group/dark rounded-md border p-1.5 transition-all hover:bg-border sm:group-[.not-top]:rounded-xl'
          >
            <span class='sr-only'>Dark Theme</span>
            <svg class='size-6 transition-all group-hover/dark:text-primary dark:hidden'>
              <use href='/icons/header.svg#mingcute-sun-line'></use>
            </svg>
            <svg class='hidden size-6 transition-all group-hover/dark:text-primary dark:block'>
              <use href='/icons/header.svg#mingcute-moon-stars-line'></use>
            </svg>
          </button>
          <button
            id='toggleMenu'
            class='rounded-md border p-1.5 transition-all hover:bg-border sm:hidden sm:group-[.not-top]:rounded-xl'
          >
            <span class='sr-only'>Menu</span>
            <svg class='size-6'>
              <use href='/icons/header.svg#mingcute-menu-line'></use>
            </svg>
          </button>
        </div>
      </div>
    </nav>
  </header>
</header-component>

<script type="module">
  function setupCustomContextMenu() {
    const menu = document.getElementById('custom-context-menu');
    if (!menu) return;

    // Prevent duplicate bindings
    document.removeEventListener('contextmenu', onContextMenu);
    document.removeEventListener('click', onClickOutside);
    document.removeEventListener('keydown', onEscape);
    window.removeEventListener('scroll', hideCustomMenu);

    document.addEventListener('contextmenu', onContextMenu);
    document.addEventListener('click', onClickOutside);
    document.addEventListener('keydown', onEscape);
    window.addEventListener('scroll', hideCustomMenu);

    function onContextMenu(event) {
      event.preventDefault();
      showCustomMenu(event.clientX, event.clientY);
    }

    function onClickOutside(event) {
      if (event.target instanceof Node && !menu.contains(event.target)) {
        hideCustomMenu();
      }
    }

    function onEscape(event) {
      if (event.key === 'Escape') hideCustomMenu();
    }

    function showCustomMenu(x, y) {
      menu.style.display = 'block'; // prevent flash, enable fade
      requestAnimationFrame(() => {
        menu.classList.add('visible');
      });

      menu.style.left = `${x}px`;
      menu.style.top = `${y}px`;

      const { innerWidth, innerHeight } = window;
      const rect = menu.getBoundingClientRect();

      if (x + rect.width > innerWidth) {
        menu.style.left = `${innerWidth - rect.width - 10}px`;
      }
      if (y + rect.height > innerHeight) {
        menu.style.top = `${innerHeight - rect.height - 10}px`;
      }
    }

    function hideCustomMenu() {
      menu.classList.remove('visible');
      setTimeout(() => {
        if (!menu.classList.contains('visible')) {
          menu.style.display = 'none';
        }
      }, 225); // Match transition duration
    }
  }

  // Run on first load
  setupCustomContextMenu();

  // Re-run after every view transition
  if (document.startViewTransition) {
    document.addEventListener('astro:after-swap', () => {
      setupCustomContextMenu();
    });
  }
</script>

<script>
class Header extends HTMLElement {
  audio;
  lastTrailTime = 0;
  trailInterval = 12.5;
  trailEnabled = true;
  hitsoundEnabled = true;

  globalClickHandler = (e: MouseEvent) => {
    this.playClickSound();
  };

  playClickSound() {
    if (!this.hitsoundEnabled) return;
    const clickSound = new Audio('/audio/click2.wav');
    clickSound.volume = 0.2;
    clickSound.play();
  }
  
  constructor() {
    super();

    // Load hitsound toggle state from localStorage
    const savedHitsound = localStorage.getItem('hitsoundEnabled');
    this.hitsoundEnabled = savedHitsound !== null ? savedHitsound === 'true' : false; // default false

    // Restore saved cursor trail state from localStorage or default to true
    const savedTrail = localStorage.getItem('cursorTrailEnabled');
    this.trailEnabled = savedTrail !== null ? savedTrail === 'true' : true;

    // Audio instance initialization (your existing code)
    if (!window.audioInstance) {
      window.audioInstance = new Audio('/audio/songs.mp3');
      window.audioInstance.volume = 0.07;

      const storedLoop = sessionStorage.getItem('isLooping') === 'true';
      window.audioInstance.loop = storedLoop;

      window.audioInstance.addEventListener('ended', () => {
        sessionStorage.setItem('isPlaying', 'false');
        const playBtn = document.getElementById('playPauseBtn');
        if (playBtn) playBtn.innerText = '🎶 Play Music';
      });
    }
    this.audio = window.audioInstance;

    // Bind the mouse move handler so 'this' works correctly
    this.mouseMoveHandler = this.mouseMoveHandler.bind(this);
    this.toggleCursorTrail = this.toggleCursorTrail.bind(this);
  }

connectedCallback() {
  // Scroll behavior
  // let preScrollY = window.scrollY;
  // this.classList.toggle('not-top', preScrollY > 20);

  // window.addEventListener('scroll', () => {
  //   this.classList.toggle('not-top', window.scrollY > 20);
  //   this.dataset.show = (window.scrollY < 350 || window.scrollY < preScrollY).toString();
  //   preScrollY = window.scrollY;
  // });

  const hitsoundBtn = document.getElementById('toggleHitsound');
  if (hitsoundBtn) {
    hitsoundBtn.textContent = this.hitsoundEnabled ? "✔️ Hitsound" : "❌ Hitsound";

    hitsoundBtn.addEventListener('click', () => {
      this.hitsoundEnabled = !this.hitsoundEnabled;
      localStorage.setItem('hitsoundEnabled', this.hitsoundEnabled.toString());
      hitsoundBtn.textContent = this.hitsoundEnabled ? "✔️ Hitsound" : "❌ Hitsound";
      // this.playClickSound(); // give audio feedback when toggling
    });
  }

  document.addEventListener('click', this.globalClickHandler);

  // Theme toggle
  function getCurrentTheme() {
    return localStorage.getItem('theme');
  }

  const toggleDarkModeButton = this.querySelector('#toggleDarkMode');
  toggleDarkModeButton?.addEventListener('click', () => {
    const toggleDarkModeEvent = new CustomEvent('theme-change', {
      detail: { theme: getCurrentTheme() === 'light' ? 'dark' : 'light' }
    });
    document.dispatchEvent(toggleDarkModeEvent);
  });

  // Menu toggle
  const toggleMenuButton = this.querySelector('#toggleMenu');
  toggleMenuButton?.addEventListener('click', () => {
    this.classList.toggle('expanded');
  });

  // Audio Controls
  const playBtn = document.getElementById('playPauseBtn');
  const loopBtn = document.getElementById('loopToggleBtn');

  if (playBtn) {
    const isPlaying = sessionStorage.getItem('isPlaying') === 'true';
    playBtn.innerText = isPlaying ? '🔇 Pause Music' : '🎶 Play Music';

    if (isPlaying) {
      this.audio.play().catch(() => {
        sessionStorage.setItem('isPlaying', 'false');
        playBtn.innerText = '🎶 Play Music';
      });
    }

    playBtn.onclick = () => {
      if (this.audio.paused) {
        this.audio.play();
        playBtn.innerText = '🔇 Pause Music';
        sessionStorage.setItem('isPlaying', 'true');
      } else {
        this.audio.pause();
        playBtn.innerText = '🎶 Play Music';
        sessionStorage.setItem('isPlaying', 'false');
      }
    };
  }

  if (loopBtn) {
    loopBtn.innerText = this.audio.loop ? '✔️ Loop Music' : '❌ Loop Music';

    loopBtn.onclick = () => {
      this.audio.loop = !this.audio.loop;
      sessionStorage.setItem('isLooping', this.audio.loop.toString());
      loopBtn.innerText = this.audio.loop ? '✔️ Loop Music' : '❌ Loop Music';
    };
  }

  // Restart
  const restartBtn = document.getElementById('restartBtn');
  if (restartBtn) {
    restartBtn.addEventListener('click', () => {
      if (this.audio) {
        this.audio.currentTime = 0;
      }
    });
  }
  
  // Playback Rate Toggle
  const playbackBtn = document.getElementById('playbackToggleBtn');
  if (playbackBtn) {
    const isFast = this.audio.playbackRate === 1.5;
    playbackBtn.innerText = isFast ? '⏩ Double Time' : '▶️ NoMod';

    playbackBtn.onclick = () => {
      const isCurrentlyFast = this.audio.playbackRate === 1.5;
      this.audio.playbackRate = isCurrentlyFast ? 1 : 1.5;
      playbackBtn.innerText = isCurrentlyFast ? '▶️ NoMod' : '⏩ Double Time';
    };
  }

  // Increase/Decrease Volume
  const volumeUpBtn = document.getElementById('volumeUpBtn');
  if (volumeUpBtn) {
    volumeUpBtn.addEventListener('click', () => {
      if (this.audio) {
        this.audio.volume = Math.min(this.audio.volume + 0.02, 1); // max 1.0
      }
    });
  }

  const volumeDownBtn = document.getElementById('volumeDownBtn');
  if (volumeDownBtn) {
    volumeDownBtn.addEventListener('click', () => {
      if (this.audio) {
        this.audio.volume = Math.max(this.audio.volume - 0.02, 0); // min 0.0
      }
    });
  }

  // Credit
  const creditsBtn = document.getElementById('creditsBtn');
  if (creditsBtn) {
    creditsBtn.addEventListener('click', () => {
      // alert('❤️ Made with love by witchhunted');
    });
  }

  // Cursor trail listeners
  document.addEventListener('mousemove', this.mouseMoveHandler);

  const toggleItem = document.getElementById('toggleCursorTrail');
  if (toggleItem) {
    toggleItem.addEventListener('click', this.toggleCursorTrail);
    toggleItem.textContent = this.trailEnabled ? "✔️ Cursortrail" : "❌ Cursortrail";
  }
}

  disconnectedCallback() {
    
    // Clean up cursor trail listeners
    document.removeEventListener('mousemove', this.mouseMoveHandler);
    document.removeEventListener('click', this.globalClickHandler);

    const toggleItem = document.getElementById('toggleCursorTrail');
    if (toggleItem) {
      toggleItem.removeEventListener('click', this.toggleCursorTrail);
    }
  }

  mouseMoveHandler(e: MouseEvent) {
    if (!this.trailEnabled) return;

    const now = Date.now();
    if (now - this.lastTrailTime < this.trailInterval) return;
    this.lastTrailTime = now;

    const trail = document.createElement('img');
    trail.src = '/images/cursortrail.png';
    trail.style.position = 'fixed';
    trail.style.left = `${e.clientX - 10}px`;
    trail.style.top = `${e.clientY - 9}px`;
    trail.style.width = '20px';
    trail.style.pointerEvents = 'none';
    trail.style.zIndex = '9999';
    trail.style.opacity = '0.7';
    trail.style.transition = 'opacity 0.5s ease-out, transform 0.5s ease-out';

    document.body.appendChild(trail);

    setTimeout(() => {
      trail.style.opacity = '0';
      trail.style.transform = 'scale(1.5)';
    }, 0);

    setTimeout(() => trail.remove(), 500);
  }

  toggleCursorTrail() {
    this.trailEnabled = !this.trailEnabled;
    localStorage.setItem('Enabled', this.trailEnabled.toString());

    const toggleItem = document.getElementById('toggleCursorTrail');
    if (toggleItem) {
      toggleItem.textContent = this.trailEnabled ? "✔️ Cursortrail" : "❌ Cursortrail";
    }
  }
}

customElements.define('header-component', Header);

</script>

<script>
let scrollListenerAdded = false;

function setupHeaderScrollBehavior() {
  const element = document.querySelector('header-component');
  if (!element) return;

  let preScrollY = window.scrollY;
  element.classList.toggle('not-top', preScrollY > 20);

  // If listener already added, remove previous before adding new (to avoid duplicates)
  if (scrollListenerAdded) {
    window.removeEventListener('scroll', onScroll);
  }

  function onScroll() {
    if (!element) return;

    const el = element as HTMLElement;
    el.classList.toggle('not-top', window.scrollY > 20);
    el.dataset.show = (window.scrollY < 350 || window.scrollY < preScrollY).toString();
    preScrollY = window.scrollY;
  }

  window.addEventListener('scroll', onScroll);
  scrollListenerAdded = true;
}

// Run on initial load
setupHeaderScrollBehavior();

// Re-run after every SPA page swap (Astro example)
  document.addEventListener('astro:after-swap', () => {
    setupHeaderScrollBehavior();
  });
</script>

<!-- <script>
  class Header extends HTMLElement {
    private audio: HTMLAudioElement;

    constructor() {
      super();

      // Check if audio instance already exists and use it; otherwise, create a new one
      if (!window.audioInstance) {
        window.audioInstance = new Audio('/audio/songs.mp3');
        window.audioInstance.volume = 0.07;
        window.audioInstance.loop = false; // Disable looping

        // Add an event listener for the 'ended' event to reset play state and icon when audio finishes
        window.audioInstance.addEventListener('ended', () => {
          const playPauseLink = document.querySelector('#playPauseLink');
          if (playPauseLink) {
            playPauseLink.innerHTML = '<svg class="size-6"><use href="/icons/header.svg#play-circle-line"></use></svg>'; // Reset to play icon
          }
          sessionStorage.setItem('isPlaying', 'false'); // Reset play state in sessionStorage
        });
      }

      // Set the audio element to the global instance
      this.audio = window.audioInstance;

      // Play the audio if sessionStorage indicates it should be playing
      if (sessionStorage.getItem('isPlaying') === 'true') {
        this.audio.play().then(() => {
          // Playback started successfully, keep icon as pause
        }).catch((err) => {
          // Autoplay failed (likely due to user gesture requirement)
          sessionStorage.setItem('isPlaying', 'false');
          const playPauseLink = document.querySelector('#playPauseLink');
          if (playPauseLink) {
            playPauseLink.innerHTML = '<svg class="size-6"><use href="/icons/header.svg#play-circle-line"></use></svg>';
          }
        });
      }

    }

    connectedCallback() {
      let preScrollY = window.scrollY;
      this.classList.toggle('not-top', preScrollY > 20);

      window.addEventListener('scroll', () => {
        this.classList.toggle('not-top', window.scrollY > 20);
        this.dataset.show = (window.scrollY < 350 || window.scrollY < preScrollY).toString();
        preScrollY = window.scrollY;
      });

      function getCurrentTheme() {
        return localStorage.getItem('theme');
      }

      const toggleDarkModeButton = this.querySelector('#toggleDarkMode');
      toggleDarkModeButton?.addEventListener('click', () => {
        const toggleDarkModeEvent = new CustomEvent('theme-change', {
          detail: { theme: getCurrentTheme() === 'light' ? 'dark' : 'light' }
        });
        document.dispatchEvent(toggleDarkModeEvent);
      });

      const toggleMenuButton = this.querySelector('#toggleMenu');
      toggleMenuButton?.addEventListener('click', () => {
        this.classList.toggle('expanded');
      });

      const playPauseLink = this.querySelector('#playPauseLink');

      // Set initial button icon based on the stored play state
      if (playPauseLink) {
        const isPlaying = sessionStorage.getItem('isPlaying') === 'true';
        playPauseLink.innerHTML = isPlaying 
          ? '<svg class="size-6"><use href="/icons/header.svg#pause-circle-line"></use></svg>' // Pause icon
          : '<svg class="size-6"><use href="/icons/header.svg#play-circle-line"></use></svg>'; // Play icon

        playPauseLink.addEventListener('click', (e) => {
          e.preventDefault(); // Prevent page refresh from anchor tag's default action
          if (this.audio.paused) {
            playPauseLink.innerHTML = '<svg class="size-6"><use href="/icons/header.svg#pause-circle-line"></use></svg>'; // Pause icon
            this.audio.play();
            sessionStorage.setItem('isPlaying', 'true'); // Save play state
          } else {
            playPauseLink.innerHTML = '<svg class="size-6"><use href="/icons/header.svg#play-circle-line"></use></svg>'; // Play icon
            this.audio.pause();
            sessionStorage.setItem('isPlaying', 'false'); // Save play state
          }
        });
      }
    }
  }

  // Register the header component
  customElements.define('header-component', Header);
</script> -->

<style>
  /* header-componnet */
  header-component.not-top {
    box-shadow:
      rgb(255, 255, 255) 0px 0px 0px 0px,
      rgba(24, 24, 27, 0.08) 0px 0px 0px 1px,
      rgba(39, 39, 42, 0.08) 0px 10px 15px -3px,
      rgba(39, 39, 42, 0.08) 0px 4px 6px -4px;
  }
  header-component[data-show='false']:not(.expanded) {
    transform: translateY(-5rem);
  }
  @media (min-width: 800px) {
    header-component.not-top {
      width: 80%;
    }
  }

  /* header menu */
  @media (max-width: 640px) {
    #headerExpandConetent {
      grid-template-rows: 0fr;
    }
    .expanded #headerExpandConetent {
      grid-template-rows: 1fr;
    }
    .expanded.not-top #headerExpandConetent {
      box-shadow:
        rgb(255, 255, 255) 0px 0px 0px 0px,
        rgba(24, 24, 27, 0.08) 0px 0px 0px 1px,
        rgba(39, 39, 42, 0.08) 0px 10px 15px -3px,
        rgba(39, 39, 42, 0.08) 0px 4px 6px -4px;
    }
  }

  /* Add hover effect for play/pause button */
  #playPauseButton svg {
    transition: transform 0.3s ease, opacity 0.3s ease; /* Smooth transition */
  }

  #playPauseButton:hover svg {
    transform: scale(1.2); /* Slightly enlarge the icon */
    opacity: 0.8; /* Slightly fade the icon */
  }
</style>
