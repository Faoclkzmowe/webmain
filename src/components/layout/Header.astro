---
import { siteConfig, menuLinks } from '@/site-config'
declare global {
  interface Window {
    audioInstance?: HTMLAudioElement;
  }
}

---

<header-component
  class='group sticky top-4 z-30 mb-16 box-content w-full rounded-xl border border-transparent py-1 transition-all duration-300 sm:rounded-2xl [&.not-top]:border-border [&.not-top]:bg-background dark:[&.not-top]:bg-primary-foreground'
>
  <header class='flex flex-wrap text-sm sm:flex-nowrap sm:justify-start'>
    <nav
      class='relative mx-auto flex w-full items-center justify-between sm:flex sm:items-center'
      aria-label='global'
    >
      <div
        class='absolute -left-4 -top-8 -z-10 box-content hidden h-20 w-[calc(100%+2rem)] !duration-0 max-sm:group-[.expanded]:block max-sm:group-[.expanded.not-top]:hidden max-sm:group-[.expanded]:bg-white dark:max-sm:group-[.expanded]:bg-primary-foreground'
      >
      </div>
      <a
        class='flex-none text-xl font-semibold transition-all duration-300 group-[.not-top]:ms-3 sm:group-[.not-top]:ms-5'
        href='/'
        aria-label='Brand'>{siteConfig.title}</a
      >

      <!-- menu -->
      <div class='flex gap-x-4 sm:gap-x-6'>
        <div
          id='headerExpandConetent'
          class='end-0 start-0 top-12 z-20 grid transition-all duration-300 group-[.not-top]:rounded-xl group-[.expanded]:opacity-100 dark:group-[.expanded.not-top]:bg-primary-foreground max-md:border-b max-sm:absolute max-sm:pb-4 max-sm:pt-0 max-sm:opacity-0 max-sm:group-[.not-top]:border max-sm:group-[.expanded]:bg-background max-sm:group-[.not-top]:px-4 max-sm:group-[.not-top]:pb-2 max-sm:group-[.not-top]:pt-2 sm:grid-rows-1 sm:border-0'
        >
          <div
            class='absolute -left-4 top-0 -z-10 box-content hidden h-full w-[calc(100%+2rem)] bg-white max-md:border-b max-sm:group-[.expanded]:block max-sm:group-[.expanded.not-top]:hidden dark:max-sm:group-[.expanded]:bg-primary-foreground'
          >
          </div>
          <div
            class='flex flex-col items-center justify-center gap-x-5 gap-y-2 overflow-hidden transition-colors sm:flex-row sm:gap-x-7'
          >
            {
              menuLinks.map((item) => (
                <a
                  href={item.link}
                  class='w-full flex-none grow py-2 text-right text-[1.05rem] font-medium hover:text-primary sm:w-fit'
                  aria-label='Nav Menu Item'
                >
                  {item.label}
                </a>
              ))
            }
            <div class='flex w-full grow flex-row justify-end gap-x-3 sm:w-fit sm:gap-x-5'>
              <!-- <a class='px-1 py-2' href='https://www.travellings.cn/go.html' title='Travelling'>
                <span class='sr-only'>Travelling</span>
                <svg class='size-6'>
                  <use href='/icons/header.svg#mingcute-train-2-line'></use>
                </svg>
              </a> -->

              <a class='px-1 py-2' href='/search' title='Search'>
                <span class='sr-only'>Search</span>
                <svg class='size-6'>
                  <use href='/icons/header.svg#mingcute-search-2-line'></use>
                </svg>
              </a>
            </div>
            <div class='flex w-full grow flex-row justify-end gap-x-3 sm:w-fit sm:gap-x-5'>
              <!-- <span id="playPauseButton">Play</span> -->
              <!-- <a style="cursor:pointer" id="playPauseLink" class="play-pause-link">
                <svg class="size-6">
                  <use href="/icons/header.svg#play-circle-line"></use>
                </svg>
              </a> -->
            </div>
            
          </div>
        </div>

        <!-- buttons -->
        <div class='flex gap-x-4 transition-all group-[.not-top]:me-1.5 group-[.not-top]:gap-x-2'>
          <!-- Dark/Light mode button -->
          <!-- <button
            id='toggleDarkMode'
            class='group/dark rounded-md border p-1.5 transition-all hover:bg-border sm:group-[.not-top]:rounded-xl'
          >
            <span class='sr-only'>Dark Theme</span>
            <svg class='size-6 transition-all group-hover/dark:text-primary dark:hidden'>
              <use href='/icons/header.svg#mingcute-sun-line'></use>
            </svg>
            <svg class='hidden size-6 transition-all group-hover/dark:text-primary dark:block'>
              <use href='/icons/header.svg#mingcute-moon-stars-line'></use>
            </svg>
          </button> -->
          <button
            id='toggleMenu'
            class='rounded-md border p-1.5 transition-all hover:bg-border sm:hidden sm:group-[.not-top]:rounded-xl'
          >
            <span class='sr-only'>Menu</span>
            <svg class='size-6'>
              <use href='/icons/header.svg#mingcute-menu-line'></use>
            </svg>
          </button>
        </div>
      </div>
    </nav>
  </header>
</header-component>

<script>
  // === Context Menu Handling ===
  document.addEventListener('contextmenu', (event) => {
    event.preventDefault();
    showCustomMenu(event.clientX, event.clientY);
  });

  document.addEventListener('click', (event) => {
    const menu = document.getElementById('custom-context-menu');
    if (menu && !menu.contains(event.target)) {
      menu.classList.add('hidden');
    }
  });

  document.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      document.getElementById('custom-context-menu')?.classList.add('hidden');
    }
  });

  window.addEventListener('scroll', () => {
    document.getElementById('custom-context-menu')?.classList.add('hidden');
  });

  function showCustomMenu(x, y) {
    const menu = document.getElementById('custom-context-menu');
    if (!menu) return;

    menu.style.left = `${x}px`;
    menu.style.top = `${y}px`;
    menu.classList.remove('hidden');

    const { innerWidth, innerHeight } = window;
    const rect = menu.getBoundingClientRect();

    if (x + rect.width > innerWidth) {
      menu.style.left = `${innerWidth - rect.width - 10}px`;
    }
    if (y + rect.height > innerHeight) {
      menu.style.top = `${innerHeight - rect.height - 10}px`;
    }
  }
</script>
<script>
  // Setup audio globally
  let audio = window.audioInstance;
  if (!audio) {
    audio = new Audio('/audio/songs.mp3');
    audio.volume = 0.07;
    audio.loop = sessionStorage.getItem('isLooping') === 'true';
    window.audioInstance = audio;

    audio.addEventListener('ended', () => {
      sessionStorage.setItem('isPlaying', 'false');
      const playBtn = document.getElementById('playPauseBtn');
      if (playBtn) playBtn.innerText = '▶️ Play Music';
    });
  }

  function updateUI() {
    const playBtn = document.getElementById('playPauseBtn');
    const loopBtn = document.getElementById('loopToggleBtn');

    if (playBtn) {
      const isPlaying = sessionStorage.getItem('isPlaying') === 'true';
      playBtn.innerText = isPlaying ? '⏸️ Pause Music' : '▶️ Play Music';

      if (isPlaying && audio.paused) {
        audio.play().catch(() => {
          sessionStorage.setItem('isPlaying', 'false');
          playBtn.innerText = '▶️ Play Music';
        });
      }

      playBtn.onclick = () => {
        if (audio.paused) {
          audio.play();
          playBtn.innerText = '⏸️ Pause Music';
          sessionStorage.setItem('isPlaying', 'true');
        } else {
          audio.pause();
          playBtn.innerText = '▶️ Play Music';
          sessionStorage.setItem('isPlaying', 'false');
        }
      };
    }

    if (loopBtn) {
      // Always reflect latest loop state
      loopBtn.innerText = audio.loop ? '✔️ Loop Music' : '❌ Loop Music';

      loopBtn.onclick = () => {
        audio.loop = !audio.loop;
        sessionStorage.setItem('isLooping', audio.loop.toString());
        loopBtn.innerText = audio.loop ? '✔️ Loop Music' : '❌ Loop Music';
      };
    }
  }

  // Initial UI setup on full load
  window.addEventListener('DOMContentLoaded', updateUI);

  // If you use SPA navigation, rerun when page is swapped
  document.addEventListener('astro:after-swap', updateUI);
</script>

<!-- <script>
  class Header extends HTMLElement {
    private audio: HTMLAudioElement;

    constructor() {
      super();

      // Check if audio instance already exists and use it; otherwise, create a new one
      if (!window.audioInstance) {
        window.audioInstance = new Audio('/audio/songs.mp3');
        window.audioInstance.volume = 0.07;
        window.audioInstance.loop = false; // Disable looping

        // Add an event listener for the 'ended' event to reset play state and icon when audio finishes
        window.audioInstance.addEventListener('ended', () => {
          const playPauseLink = document.querySelector('#playPauseLink');
          if (playPauseLink) {
            playPauseLink.innerHTML = '<svg class="size-6"><use href="/icons/header.svg#play-circle-line"></use></svg>'; // Reset to play icon
          }
          sessionStorage.setItem('isPlaying', 'false'); // Reset play state in sessionStorage
        });
      }

      // Set the audio element to the global instance
      this.audio = window.audioInstance;

      // Play the audio if sessionStorage indicates it should be playing
      if (sessionStorage.getItem('isPlaying') === 'true') {
        this.audio.play().then(() => {
          // Playback started successfully, keep icon as pause
        }).catch((err) => {
          // Autoplay failed (likely due to user gesture requirement)
          sessionStorage.setItem('isPlaying', 'false');
          const playPauseLink = document.querySelector('#playPauseLink');
          if (playPauseLink) {
            playPauseLink.innerHTML = '<svg class="size-6"><use href="/icons/header.svg#play-circle-line"></use></svg>';
          }
        });
      }

    }

    connectedCallback() {
      let preScrollY = window.scrollY;
      this.classList.toggle('not-top', preScrollY > 20);

      window.addEventListener('scroll', () => {
        this.classList.toggle('not-top', window.scrollY > 20);
        this.dataset.show = (window.scrollY < 350 || window.scrollY < preScrollY).toString();
        preScrollY = window.scrollY;
      });

      function getCurrentTheme() {
        return localStorage.getItem('theme');
      }

      const toggleDarkModeButton = this.querySelector('#toggleDarkMode');
      toggleDarkModeButton?.addEventListener('click', () => {
        const toggleDarkModeEvent = new CustomEvent('theme-change', {
          detail: { theme: getCurrentTheme() === 'light' ? 'dark' : 'light' }
        });
        document.dispatchEvent(toggleDarkModeEvent);
      });

      const toggleMenuButton = this.querySelector('#toggleMenu');
      toggleMenuButton?.addEventListener('click', () => {
        this.classList.toggle('expanded');
      });

      const playPauseLink = this.querySelector('#playPauseLink');

      // Set initial button icon based on the stored play state
      if (playPauseLink) {
        const isPlaying = sessionStorage.getItem('isPlaying') === 'true';
        playPauseLink.innerHTML = isPlaying 
          ? '<svg class="size-6"><use href="/icons/header.svg#pause-circle-line"></use></svg>' // Pause icon
          : '<svg class="size-6"><use href="/icons/header.svg#play-circle-line"></use></svg>'; // Play icon

        playPauseLink.addEventListener('click', (e) => {
          e.preventDefault(); // Prevent page refresh from anchor tag's default action
          if (this.audio.paused) {
            playPauseLink.innerHTML = '<svg class="size-6"><use href="/icons/header.svg#pause-circle-line"></use></svg>'; // Pause icon
            this.audio.play();
            sessionStorage.setItem('isPlaying', 'true'); // Save play state
          } else {
            playPauseLink.innerHTML = '<svg class="size-6"><use href="/icons/header.svg#play-circle-line"></use></svg>'; // Play icon
            this.audio.pause();
            sessionStorage.setItem('isPlaying', 'false'); // Save play state
          }
        });
      }
    }
  }

  // Register the header component
  customElements.define('header-component', Header);
</script> -->

<style>
  /* header-componnet */
  header-component.not-top {
    box-shadow:
      rgb(255, 255, 255) 0px 0px 0px 0px,
      rgba(24, 24, 27, 0.08) 0px 0px 0px 1px,
      rgba(39, 39, 42, 0.08) 0px 10px 15px -3px,
      rgba(39, 39, 42, 0.08) 0px 4px 6px -4px;
  }
  header-component[data-show='false']:not(.expanded) {
    transform: translateY(-5rem);
  }
  @media (min-width: 800px) {
    header-component.not-top {
      width: 80%;
    }
  }

  /* header menu */
  @media (max-width: 640px) {
    #headerExpandConetent {
      grid-template-rows: 0fr;
    }
    .expanded #headerExpandConetent {
      grid-template-rows: 1fr;
    }
    .expanded.not-top #headerExpandConetent {
      box-shadow:
        rgb(255, 255, 255) 0px 0px 0px 0px,
        rgba(24, 24, 27, 0.08) 0px 0px 0px 1px,
        rgba(39, 39, 42, 0.08) 0px 10px 15px -3px,
        rgba(39, 39, 42, 0.08) 0px 4px 6px -4px;
    }
  }

  /* Add hover effect for play/pause button */
  #playPauseButton svg {
    transition: transform 0.3s ease, opacity 0.3s ease; /* Smooth transition */
  }

  #playPauseButton:hover svg {
    transform: scale(1.2); /* Slightly enlarge the icon */
    opacity: 0.8; /* Slightly fade the icon */
  }
</style>
